# Copyright (c) godot-rust; Bromeon and contributors.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

name: Full CI
#
# Runs before merging. Rebases on master to make sure CI passes for latest integration, not only for the PR at the time of creation.

on:
  merge_group:
#  push:

env:
  GDEXT_FEATURES: ''
#  GDEXT_FEATURES: '--features godot/serde'
  RETRY: ${{ github.workspace }}/.github/other/retry.sh

  # ASan options: https://github.com/google/sanitizers/wiki/AddressSanitizerFlags
  # LSan options: https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer
  # * report_objects: list individual leaked objects when running LeakSanitizer
  LSAN_OPTIONS: report_objects=1

  CARGO_DENY_VERSION: "0.14.20"
  CARGO_MACHETE_VERSION: "0.6.0"

defaults:
  run:
    shell: bash

# If a new commit is pushed before the old one's CI has completed (on the same branch), abort previous run
#concurrency:
#  group: ${{ github.head_ref }}
#  cancel-in-progress: true

jobs:
  rustfmt:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4

      - name: "Install Rust"
        uses: ./.github/composite/rust
        with:
          components: rustfmt

      - name: "Check rustfmt"
        run: cargo fmt --all -- --check


  # Needs to be its own job (apart from sync-doc), because lints don't work with --no-deps, and because it contributes to ci-status.
  doc-lints:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v4

    - name: "Patch Cargo.toml to use nightly extension API"
      run: .github/other/patch-prebuilt.sh nightly

    - name: "Install Rust"
      uses: ./.github/composite/rust
      with:
        components: rustdoc

    - name: "Check rustdoc"
      env:
        RUSTDOCFLAGS: >
          -D rustdoc::broken-intra-doc-links -D rustdoc::private-intra-doc-links -D rustdoc::invalid-codeblock-attributes 
          -D rustdoc::invalid-rust-codeblocks -D rustdoc::invalid-html-tags -D rustdoc::bare-urls -D rustdoc::unescaped-backticks
      run: cargo doc -p godot --ignore-rust-version


  clippy:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4

      - name: "Patch Cargo.toml to use nightly extension API"
        run: .github/other/patch-prebuilt.sh nightly

      - name: "Install Rust"
        uses: ./.github/composite/rust
        with:
          components: clippy

      # Note: could use `-- --no-deps` to not lint dependencies, however it doesn't really speed up and also skips deps in workspace.
      - name: "Check clippy"
        run: |
          cargo clippy --all-targets $GDEXT_FEATURES -- \
          -D clippy::suspicious \
          -D clippy::style \
          -D clippy::complexity \
          -D clippy::perf \
          -D clippy::dbg_macro \
          -D clippy::todo \
          -D clippy::unimplemented \
          -D warnings

  unit-test:
    name: unit-test (${{ matrix.name }}${{ matrix.rust-special }})
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    strategy:
      fail-fast: false # cancel all jobs as soon as one fails?
      matrix:
        # Order this way because macOS typically has the longest duration, followed by Windows, so it benefits total workflow execution time.
        # Additionally, the 'linux (msrv *)' special case will then be listed next to the other 'linux' jobs.
        # Note: Windows uses '--target x86_64-pc-windows-msvc' by default as Cargo argument.
        include:
          - name: macos
            os: macos-11

          - name: windows
            os: windows-latest

          # Don't use latest Ubuntu (22.04) as it breaks lots of ecosystem compatibility.
          # If ever moving to ubuntu-latest, need to manually install libtinfo5 for LLVM.
          - name: linux
            os: ubuntu-20.04

          - name: linux
            os: ubuntu-20.04
            rust-toolchain: nightly
            rust-special: -minimal-deps
            rust-cache-key: minimal-deps

          - name: linux
            os: ubuntu-20.04
            rust-toolchain: "1.77.1"
            rust-special: -msrv

    steps:
      - uses: actions/checkout@v4

      - name: "Patch Cargo.toml to use nightly extension API"
        # Only on Linux because godot4-prebuilt/nightly branch doesn't have artifacts for other platforms.
        if: matrix.name == 'linux' && matrix.rust-special == ''
        run: .github/other/patch-prebuilt.sh nightly

      - name: "Install Rust"
        uses: ./.github/composite/rust
        with:
          rust: ${{ matrix.rust-toolchain || 'stable' }}
          cache-key: ${{ matrix.rust-cache-key }} # only needed when rustc version is possibly the same

      - name: "Install minimal dependency versions from Cargo"
        if: matrix.rust-special == '-minimal-deps'
        run: cargo +nightly update -Z minimal-versions

      - name: "Compile tests"
        run: cargo test $GDEXT_FEATURES --no-run ${{ matrix.rust-extra-args }}

      - name: "Test"
        run: cargo test $GDEXT_FEATURES ${{ matrix.rust-extra-args }}


  miri-test:
    name: miri-test
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4

      - name: "Install Rust"
        uses: ./.github/composite/rust
        with:
          rust: nightly
          components: miri
      
      - name: "Setup Miri"
        run: cargo miri setup

      - name: "Compile tests"
        run: cargo miri test -p godot-cell --no-run

      - name: "Test stacked borrows"
        run: cargo miri test -p godot-cell
      
      - name: "Test tree borrows"
        run: MIRIFLAGS="-Zmiri-tree-borrows" cargo miri test -p godot-cell

  proptest:
    name: proptest
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4

      - name: "Install Rust"
        uses: ./.github/composite/rust

      - name: "Compile tests"
        run: cargo test -p godot-cell --features="proptest" --no-run

      - name: "Test"
        run: cargo test -p godot-cell --features="proptest"

  # For complex matrix workflow, see https://stackoverflow.com/a/65434401
  godot-itest:
    name: godot-itest (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    timeout-minutes: 24
    strategy:
      fail-fast: false # cancel all jobs as soon as one fails?
      matrix:
        # Naming: {os}[-{runtimeVersion}]-{apiVersion}
        # runtimeVersion = version of Godot binary; apiVersion = version of GDExtension API against which gdext is compiled.

        # Order this way because macOS typically has the longest duration, followed by Windows, so it benefits total workflow execution time.
        # Additionally, the 'linux (msrv *)' special case will then be listed next to the other 'linux' jobs.
        # Note: Windows uses '--target x86_64-pc-windows-msvc' by default as Cargo argument.
        include:
          # macOS

          - name: macos
            os: macos-12
            artifact-name: macos-nightly
            godot-binary: godot.macos.editor.dev.x86_64
            rust-extra-args: --features godot/custom-godot
            with-hot-reload: true

          - name: macos-double
            os: macos-12
            artifact-name: macos-double-nightly
            godot-binary: godot.macos.editor.dev.double.x86_64
            rust-extra-args: --features godot/custom-godot,godot/double-precision

          - name: macos-4.2
            os: macos-12
            artifact-name: macos-4.2
            godot-binary: godot.macos.editor.dev.x86_64
#            godot-prebuilt-patch: '4.2.x'

#          - name: macos-4.1
#            os: macos-12
#            artifact-name: macos-4.1
#            godot-binary: godot.macos.editor.dev.x86_64
#            godot-prebuilt-patch: '4.1.3'

          # Windows

          - name: windows
            os: windows-latest
            artifact-name: windows-nightly
            godot-binary: godot.windows.editor.dev.x86_64.exe
            rust-extra-args: --features godot/custom-godot
            with-hot-reload: true

          - name: windows-double
            os: windows-latest
            artifact-name: windows-double-nightly
            godot-binary: godot.windows.editor.dev.double.x86_64.exe
            rust-extra-args: --features godot/custom-godot,godot/double-precision

          - name: windows-4.2
            os: windows-latest
            artifact-name: windows-4.2
            godot-binary: godot.windows.editor.dev.x86_64.exe
            #godot-prebuilt-patch: '4.2.x'

#          - name: windows-4.1
#            os: windows-latest
#            artifact-name: windows-4.1
#            godot-binary: godot.windows.editor.dev.x86_64.exe
#            godot-prebuilt-patch: '4.1.3'

          # Linux

          # Don't use latest Ubuntu (22.04) as it breaks lots of ecosystem compatibility.
          # If ever moving to ubuntu-latest, need to manually install libtinfo5 for LLVM.

          # Uses full+experimental codegen, so that compatibility breakage towards nightly is detected.
          # If the experimental part causes problems, consider using only godot/codegen-full.
          - name: linux-full
            os: ubuntu-20.04
            artifact-name: linux-nightly
            godot-binary: godot.linuxbsd.editor.dev.x86_64
            rust-extra-args: --features codegen-full-experimental
            with-hot-reload: true

          # Combines now a lot of features, but should be OK. lazy-function-tables doesn't work with experimental-threads.
          - name: linux-double-lazy
            os: ubuntu-20.04
            artifact-name: linux-double-nightly
            godot-binary: godot.linuxbsd.editor.dev.double.x86_64
            rust-extra-args: --features godot/custom-godot,godot/double-precision,godot/codegen-full,godot/lazy-function-tables

          - name: linux-features
            os: ubuntu-20.04
            artifact-name: linux-nightly
            godot-binary: godot.linuxbsd.editor.dev.x86_64
            rust-extra-args: --features godot/custom-godot,godot/experimental-threads,godot/serde

          - name: linux-release
            os: ubuntu-20.04
            artifact-name: linux-release-nightly
            godot-binary: godot.linuxbsd.template_release.x86_64
            rust-extra-args: --release
            rust-cache-key: release

          # Linux compat (4.0 and 4.1 disabled, already covered by memcheck)

          - name: linux-4.2
            os: ubuntu-20.04
            artifact-name: linux-4.2
            godot-binary: godot.linuxbsd.editor.dev.x86_64
            #godot-prebuilt-patch: '4.2.x'

#          - name: linux-4.1
#            os: ubuntu-20.04
#            artifact-name: linux-4.2
#            godot-binary: godot.linuxbsd.editor.dev.x86_64
#            godot-prebuilt-patch: '4.1.3'
#
#          - name: linux-4.0
#            os: ubuntu-20.04
#            artifact-name: linux-4.0
#            godot-binary: godot.linuxbsd.editor.dev.x86_64
#            godot-prebuilt-patch: '4.0.4'


          # Memory checks: special Godot binaries compiled with AddressSanitizer/LeakSanitizer to detect UB/leaks.
          # See also https://rustc-dev-guide.rust-lang.org/sanitizers.html.
          #
          # Additionally, the Godot source is patched to make dlclose() a no-op, as unloading dynamic libraries loses stacktrace and
          # cause false positives like println!. See https://github.com/google/sanitizers/issues/89.
          #
          # There is also a gcc variant besides clang, which is currently not used.
          - name: linux-memcheck-nightly
            os: ubuntu-20.04
            artifact-name: linux-memcheck-nightly
            godot-binary: godot.linuxbsd.editor.dev.x86_64.llvm.san
            rust-toolchain: nightly
            rust-env-rustflags: -Zrandomize-layout -Zsanitizer=address
            rust-extra-args: --features godot/custom-godot
            # Sanitizers can't build proc-macros and build scripts; with --target, cargo ignores RUSTFLAGS for those two.
            rust-target: x86_64-unknown-linux-gnu

          - name: linux-memcheck-4.1
            os: ubuntu-20.04
            artifact-name: linux-memcheck-4.1
            godot-binary: godot.linuxbsd.editor.dev.x86_64.llvm.san
            godot-prebuilt-patch: '4.1.3'
            rust-toolchain: nightly
            rust-env-rustflags: -Zrandomize-layout -Zsanitizer=address
            # Sanitizers can't build proc-macros and build scripts; with --target, cargo ignores RUSTFLAGS for those two.
            rust-target: x86_64-unknown-linux-gnu

          - name: linux-memcheck-4.0
            os: ubuntu-20.04
            artifact-name: linux-memcheck-4.0
            godot-binary: godot.linuxbsd.editor.dev.x86_64.llvm.san
            godot-prebuilt-patch: '4.0.4'
            rust-toolchain: nightly
            rust-env-rustflags: -Zrandomize-layout -Zsanitizer=address
            # Sanitizers can't build proc-macros and build scripts; with --target, cargo ignores RUSTFLAGS for those two.
            rust-target: x86_64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v4

      - name: "Run Godot integration test"
        uses: ./.github/composite/godot-itest
        with:
          artifact-name: godot-${{ matrix.artifact-name }}
          godot-binary: ${{ matrix.godot-binary }}
          godot-args: ${{ matrix.godot-args }} # currently unused
          godot-prebuilt-patch: ${{ matrix.godot-prebuilt-patch }}
          rust-extra-args: ${{ matrix.rust-extra-args }}
          rust-toolchain: ${{ matrix.rust-toolchain || 'stable' }}
          rust-env-rustflags: ${{ matrix.rust-env-rustflags }}
          rust-target: ${{ matrix.rust-target }}
          rust-cache-key: ${{ matrix.rust-cache-key }}
          with-llvm: ${{ contains(matrix.name, 'macos') && contains(matrix.rust-extra-args, 'custom-godot') }}
          godot-check-header: ${{ matrix.godot-check-header }}
          
      - name: "Build and test hot-reload"
        if: ${{ matrix.with-hot-reload }}
        working-directory: examples/hot-reload/godot/test
        run: ./run-test.sh
        shell: bash


  run-examples:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4

      - name: "Install Rust"
        uses: ./.github/composite/rust

      # First compile, to fail early in case of compilation errors.
      - name: "Compile Rust examples (release mode)"
        run: cargo build --release -p dodge-the-creeps

      - name: "Install Godot"
        uses: ./.github/composite/godot-install
        with:
          artifact-name: godot-linux-4.2
          godot-binary: godot.linuxbsd.editor.dev.x86_64

      - name: "Run examples for short time"
        run: ./.github/other/check-example.sh dodge-the-creeps


  cargo-deny-machete:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4

      # Deny
      # Note: manually downloading is ~30s faster than https://github.com/EmbarkStudios/cargo-deny-action
      - name: "Install cargo-deny"
        run: |
          wget --no-verbose https://github.com/EmbarkStudios/cargo-deny/releases/download/$CARGO_DENY_VERSION/cargo-deny-$CARGO_DENY_VERSION-x86_64-unknown-linux-musl.tar.gz -O cargo-deny.tar.gz
          tar -zxvf cargo-deny.tar.gz
          mkdir -p $HOME/.cargo/bin
          mv cargo-deny-$CARGO_DENY_VERSION-x86_64-unknown-linux-musl/cargo-deny $HOME/.cargo/bin
      - name: "Deny non-conforming dependencies"
        run: cargo deny check --config .github/other/deny.toml

      # Machete
      - name: "Install cargo-machete"
        uses: baptiste0928/cargo-install@v2
        with:
          crate: cargo-machete
          version: ${{ env.CARGO_MACHETE_VERSION }}
      - name: "Use machete to cut down dependencies"
        run: cargo machete


  license-guard:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4

      - name: "Check license headers"
        uses: apache/skywalking-eyes/header@v0.5.0
        with:
          # log: debug # optional: set the log level. The default value is `info`.
          config: .github/other/licenserc.yml
          # token: # optional: the token that license eye uses when it needs to comment on the pull request.
          # Set to empty ("") to disable commenting on pull request. The default value is ${{ github.token }}
          # mode: # optional: Which mode License-Eye should be run in. Choices are `check` or `fix`. The default value is `check`.
          mode: check


  # ---------------------------------------------------------------------------------------------------------------------------------------------
  # CI status report

  # Job to notify merge queue about success/failure
  ci-status:
    # Check for 'merge_group' not strictly necessary, but helpful when adding add-hoc `push:` trigger to `on:` for testing branch.
    if: always() && github.event_name == 'merge_group'
    needs:
      - rustfmt
      - doc-lints
      - clippy
      - unit-test
      - miri-test
      - proptest
      - godot-itest
      - run-examples
      - cargo-deny-machete
      - license-guard

    runs-on: ubuntu-20.04
    steps:
      # Deliberate choice to use bash script and not GitHub Action glob syntax, as that is not well-documented and hard to get right.
      # For example: contains(needs.*.result, 'success') does NOT work because * is a logical OR, thus true if a single job succeeds.
      - name: "Determine success or failure"
        run: |
          DEPENDENCIES='${{ toJson(needs) }}'
          
          echo "Dependency jobs:"
          all_success=true
          for job in $(echo "$DEPENDENCIES" | jq -r 'keys[]'); do
              status=$(echo "$DEPENDENCIES" | jq -r ".[\"$job\"].result")
              echo "* $job -> $status"
              if [[ "$status" != "success" ]]; then
                  all_success=false
              fi
          done
          
          if [[ "$all_success" == "false" ]]; then
              echo "One or more dependency jobs failed or were cancelled."
              exit 1
          fi
